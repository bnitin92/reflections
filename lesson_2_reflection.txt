What happens when you initialize a repository? Why do you need to do it?

	When we initialize a repository using git init, it makes the current directry
	as a git repository. We need it in order to make it a version control git 
	repository and perform version controlling tasks.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	Staging area is different from others as it is kind of a virtual space were 
	we put the files which are ready to be commited. It is of great values as it
	differentiates files which requir work and which are ready for commit.
	 
How can you use the staging area to make sure you have one commit per logical
change?
	
	After making a major change in the files we can add them to staging area 
	using git add and then check out using git status what files are added. 
	And then when we commit only those files will be commited which are in staging.
	Also we can check using git diff --staged to compare between staging area and
	first commit in repository to compare the difference made before commiting.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Suppose we want to make an another version of the current version like an easy 
	mode or a french version of the current version, we can use branche which makes 
	a differnt branch of the current master branch, without affecting the current 
	master brnch or main version.

How do the diagrams help you visualize the branch structure?
	
	The diagrams really helped in visualizing the structure as we were able to see 
	where the commit was and how to some non- labeled branches are not reachable 
	from anywhere unless they are retained

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
